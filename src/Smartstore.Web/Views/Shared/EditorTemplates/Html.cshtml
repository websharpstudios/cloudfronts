@using Smartstore.Utilities
@using Smartstore.Core.AI
@using Smartstore.Web.Rendering.Events
@using Smartstore.Utilities.Html

@model string

@{
    var lazy = GetMetadata<bool?>("lazy") ?? true;
    var id = Html.IdForModel();
    var html = ((string)ViewData.TemplateInfo.FormattedModelValue);
    var htmlIsEmpty = HtmlUtility.IsEmptyHtml(html);
    string culture = WorkContext.WorkingLanguage.LanguageCulture;

    Assets.BodyAttributes["data-file-manager-url"] = Display.GetFileManagerUrl();

    var attributes = new AttributeDictionary().Merge(ConvertUtility.ObjectToDictionary(ViewData["htmlAttributes"] ?? new object()));
}

<script src="~/bundle/js/codemirror.js" sm-key="codemirror" sm-target-zone="scripts"></script>

<widget key="summernote" target-zone="scripts">
    <script>
        var ai_icon_svg = $(".ai-dialog-opener-root:first .ai-icon-stars-tricolor");
    </script>
    <script src="~/bundle/js/summernote.js"></script>

    @* Find summernote localization file *@
    <script src="~/lib/editors/summernote/lang/summernote-{lang}.js" sm-locale-for="WorkContext.WorkingLanguage" sm-if='WorkContext.WorkingLanguage.LanguageCulture != "en-US"'></script>
</widget>

<widget key="summernote-resources" target-zone="end">
    @{
        // This event is used to render additional widgets in the html editor, but only once per request, not per editor instance.
        var htmlEditorRenderingEvent = new RichTextEditorRenderingEvent("summernote", ViewContext);
        await CommonServices.EventPublisher.PublishAsync(htmlEditorRenderingEvent);
        foreach (var widget in htmlEditorRenderingEvent.Widgets)
        {
            @await widget.InvokeAsync(ViewContext)
        }
    }
</widget>

<link rel="stylesheet" href="~/bundle/css/codemirror.css" sm-key="codemirror" sm-target-zone="stylesheets" />

<div class="html-editor-root edit-control"
     data-summernote-image-upload-url="@Html.Raw(Url.Action("ProcessRequest", "RoxyFileManager"))"
     data-editor="html"
     attr-data-lazy='(lazy, "true")'
     data-lang="@Html.Raw(culture != null ? $"'{culture}'" : "null")">

    <textarea asp-for="@Model"
              id="@id"
              name="@Html.NameForModel()"
              class="summernote-editor"
              attr-class='(lazy, "d-none")'>
        @Html.Raw(html)
    </textarea>

    @if (lazy)
    {
        <div class="note-editor-preview" attr-class='(htmlIsEmpty, "empty")' data-target="#@id" attr-data-lang="(culture != null, culture)">
            @if (htmlIsEmpty)
            {
                <div>
                    <i class="fab fa-html5 mr-1"></i>
                    <span class="text-muted">@T("HtmlEditor.ClickToEdit")</span>
                </div>
            }
            else
            {
                @Html.Raw(html)
            }
        </div>
    }
</div>